" Cross-platform Vim Configuration goes in this file
"
" Contents
" Main configuration
" Visual Configuration
" Shortcut Key Configuration
" Plugin Configuration
" Private Configuration
"

" ----------- Main Configuration ----------------------------------
set t_Co=256                             "This is may or may not needed.
set nocompatible                         "don't need to keep compatibility with Vi
filetype plugin indent on                "enable detection, plugins and indenting in one step
syntax on                                "Turn on syntax highlighting
set encoding=utf-8                       "Force UTF-8 encoding for special characters
set ruler                                "Turn on the ruler
set number                               "Show line numbers
set scrolloff=10                         "Keep 10 lines below cursor always
set cursorline                           "underline the current line in the file
set cursorcolumn                         "highlight the current column. Visible in GUI mode only.
set colorcolumn=80

set foldmethod=indent                    "enable folding
set foldlevel=99
"set background=light                     "make vim use colors that look good on a dark background

set showcmd                              "show incomplete cmds down the bottom
set showmode                             "show current mode down the bottom
set foldenable                           "enable folding
set showmatch                            "set show matching parenthesis
"set virtualedit=all                     "allow the cursor to go in to 'invalid' places
set incsearch                            "find the next match as we type the search
set hlsearch                             "hilight searches by default
set ignorecase                           "ignore case when searching

set shiftwidth=2                         "number of spaces to use in each autoindent step
set tabstop=2                            "two tab spaces
set softtabstop=2                        "number of spaces to skip or insert when <BS>ing or <Tab>ing
set shiftround                           "when at 3 spaces, and I hit > ... go to 4, not 5
set expandtab                            "spaces instead of tabs for better cross-editor compatibility
set smarttab                             "use shiftwidth and softtabstop to insert or delete (on <BS>) blanks
set nowrap                               "no wrapping

set backspace=indent,eol,start           "allow backspacing over everything in insert mode
"set cindent                             "recommended seting for automatic C-style indentation
set autoindent                           "automatic indentation in non-C files
"set copyindent                          "copy the previous indentation on autoindenting
"set smartindent

set noerrorbells                         "don't make noise

"set mouse-=a                            "disable mouse automatically entering visual mode
set mouse=a                              "enable mouse automatically entering visual mode
set hidden                               "allow hiding buffers with unsaved changes
set cmdheight=2                          "make the command line a little taller to hide 'press enter to viem more' text

set clipboard=unnamed                    "Use system clipboard by default
set splitright                           "splits open on the right.
set splitbelow                           "splits open below existing window..

"set exrc                                "enable per-directory .vimrc files
"set secure                              "disable unsafe stuff from local .vimrc files

set laststatus=2                         "always show status line
set lazyredraw                           "Vim 8 syntax highlighting on macOS is slow.

" Set up the backup directories to a central place.
set backupdir=$HOME/tmp/backup//
set directory=$HOME/tmp/backup//

"Python specific
au BufNewFile,BufRead *.py
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set textwidth=79
    \ set expandtab
    \ set autoindent
   " \ set fileformat=unix

au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

au BufNewFile,BufRead *.js, *.html, *.css
    \ set tabstop=2
    \ set softtabstop=2
    \ set shiftwidth=2


" ----------- Visual Configuration ----------------------------------
try
  colorscheme onedark
catch
  colorscheme PaperColor
endtry

set statusline=%f%m%r%h%w[%l][%{&ff}]%y[%p%%][%04l,%04v][%n]
"              | | | | |  |   |      |  |     |    |     |
"              | | | | |  |   |      |  |     |    |     + current
"              | | | | |  |   |      |  |     |    |       buffer
"              | | | | |  |   |      |  |     |    + current
"              | | | | |  |   |      |  |     |       column
"              | | | | |  |   |      |  |     +-- current line
"              | | | | |  |   |      |  +-- current % into file
"              | | | | |  |   |      +-- current syntax in
"              | | | | |  |   |          square brackets
"              | | | | |  |   +-- current fileformat
"              | | | | |  +-- number of lines
"              | | | | +-- preview flag in square brackets
"              | | | +-- help flag in square brackets
"              | | +-- readonly flag in square brackets
"              | +-- rodified flag in square brackets
" +-- full path to file in the buffer


" ----------- Shortcut Key Configuration ----------------------------------
let mapleader = ","                      "remap leader to ',' which is much easier than '\'

" Enable folding with the spacebar
nnoremap <space> za

"Switch to previous file with ',spacebar'
nmap <leader><SPACE> <C-^>

" Open Taglist with [,s]
"map <Leader>s :TagbarToggle<CR>

" Use leader x to remove the current line but not erase buffer
map <Leader>x "_dd

" Use leader l to rapidly toggle `set list`
nmap <leader>l :set list!<CR>

" Exit insert mode with jk
imap jk <Esc>

" reload configuration file
map <Leader>r :so $MYVIMRC<CR>

" ctags
"map <Leader>ct :!ctags -R --exclude=.git --exclude=db/dumps --exclude=tmp --exclude=coverage --exclude=log --exclude=.svn --verbose=yes * <CR>

" Exit insert mode and save with jj
imap jj <Esc>:w<CR>


" mapping to make movements operate on 1 screen line in wrap mode
function! ScreenMovement(movement)
   if &wrap
      return "g" . a:movement
   else
      return a:movement
   endif
endfunction
onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")

"split navigations
"move to the split below
nnoremap <C-J> <C-W><C-J>
"move to the split above
nnoremap <C-K> <C-W><C-K>
"move to the split on the right
nnoremap <C-L> <C-W><C-L>
"move to the split on the left
nnoremap <C-H> <C-W><C-H>


" Navigate tabs
map <leader>1 :tabp<CR>
map <leader>2 :tabn<CR>

" Turn text search highlight on/off with F5 key
map <F2> :set hls!<bar>set hls?<CR>

" double percentage sign in command mode is expanded
" to directory of current file - http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" insert blank line above in Normal mode
nnoremap <leader>O mzO<esc>`z

" insert blank line below in Normal mode
nnoremap <leader>o mzo<esc>`z


" Sort CSS properties alphabetically
nnoremap <leader>css :g#\({\n\)\@<=#.,/}/sort<cr>

" -- Number toggling
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

nnoremap <F7> :call NumberToggle()<cr>

" Toggle background color for light and dark.
" Default is dark.
function! ColorToggle()
  if(g:colors_name == "onedark")
    set background=light
    colorscheme PaperColor
  else
    set background=dark
    colorscheme onedark
  endif
endfunc

nnoremap <F8> :call ColorToggle()<cr>

" ----------- Plugin Configuration ----------------------------------

" ---------- NERDTree ------------------------------------

" Open NERDTree with [,d]
map <Leader>d :NERDTreeToggle<CR>

let NERDTreeShowLineNumbers=1
let NERDTreeMinimalUI=1
let NERDTreeShowHidden=1
let g:nerdtree_tabs_focus_on_files=1
let g:nerdtree_tabs_open_on_console_startup=1
let g:NERDTreeWinPos = "left"
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


" ---------- NERD Commenter ------------------------------
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1


" ----------- Syntastic ----------------------------------
let g:syntastic_mode_map = { 'mode': 'active' }
let g:syntastic_javascript_checkers = ['']
let g:syntastic_html_checkers = ['']

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let python_highlight_all=1


" ----------- SimpylFold ---------------------------------
"see the docstrings for folded code
let g:SimpylFold_docstring_preview=1


"------------ YouCompleteMe ------------------------------
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
